<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Computable Protocol on Computable Spec</title>
    <link>https://computablelabs.github.io/compspec/</link>
    <description>Recent content in The Computable Protocol on Computable Spec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://computablelabs.github.io/compspec/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://computablelabs.github.io/compspec/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://computablelabs.github.io/compspec/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://computablelabs.github.io/compspec/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://computablelabs.github.io/compspec/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://computablelabs.github.io/compspec/docs/attacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/docs/attacks/</guid>
      <description>Attacks This section catalogs known attacks on the protocol and known defenses against such attacks.
Front Running Attacks In the current version of the protocol, it is possible for a determined adversary to front-run a number of protocol interactions. For example, if a listing with a given listingHash is proposed but not yet confirmed as a transaction, the adversary could create an alternative transaction with the same listingHash to attempt to block the original listing.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://computablelabs.github.io/compspec/docs/capi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/docs/capi/</guid>
      <description>The Computable API We&amp;rsquo;ve covered the core Computable contracts at some depth in the last few chapters. However, we haven&amp;rsquo;t said too much detail about the datatrust. We&amp;rsquo;ve mentioned briefly that the datatrust is a key-value store that holds data off-chain. What else is a datatrust responsible for doing? When is some piece of software a datatrust? In particular what are the external signals and messages thata datatrust must respond to?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://computablelabs.github.io/compspec/docs/continuing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/docs/continuing/</guid>
      <description>Continuing Your Journey Congrats on making it through the entire Computable book! You&amp;rsquo;ve come out on the other side ready to enter the Computable ecosystem and start building your own Computable data markets, libraries, and companies.
You might be now wondering how you can continue learning. As you&amp;rsquo;ve probably already realized, there&amp;rsquo;s a vast amount of material required to understand Computable from the bottom up. The system touches upon economics, systems software, blockchains, cryptography and more.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://computablelabs.github.io/compspec/docs/contracts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/docs/contracts/</guid>
      <description>In this section, we&amp;rsquo;ll review the smart contracts that form the core of the Computable protocol. The clean version of the contracts lives in the Computable repo. These are the stable versions of the contracts and are only updated for major releases. The developer version lives in the Goest repo. We’ve built a number of developer utilities in there, including a custom testing framework that integrates closely with Geth’s tooling to provide a believable simulator engine.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://computablelabs.github.io/compspec/docs/datatrust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/docs/datatrust/</guid>
      <description>The Datatrusts A Datatrust is a software system that is responsible for storing data and coordinating with on-chain permissions layers. Put another way, the Datatrust is the off-chain portion of the Computable protocol, responsible for storing data, and delivering it upon purchase.
Each data market maintains an authorized Datatrust on-chain. A stakeholder vote is needed to authorize or remove a datatrust.
Datatrust Implementation Specification A Datatrust is a system that is responsible for storing data off-chain.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://computablelabs.github.io/compspec/docs/ethertoken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/docs/ethertoken/</guid>
      <description>Ether Token The first point of entry into the Computable ecosystem is the EtherToken contract. This contract is simply a wrapper for ETH that gives it an ERC-20 interface. You will need EtherToken for all your interactions with the Computable smart contracts.
To get started, you need to call the EtherToken.deposit() function and deposit some ETH
@public @payable def deposit(): &amp;quot;&amp;quot;&amp;quot; @notice Facilitate a user purchasing EtherToken with Eth at a 1:1 ratio &amp;quot;&amp;quot;&amp;quot; self.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://computablelabs.github.io/compspec/docs/listings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/docs/listings/</guid>
      <description>Listings A data market holds a set of &amp;ldquo;listings&amp;rdquo;. Each listing corresponds to a chunk of data contributed by a single maker and managed within the data market. The listing is physicaally stored
off-chain in the datatrust for this market.
We reproduce the fields of the on-chain listing structure (in Listing.vy) below.
struct Listing: owner: address supply: wei_value  Let&amp;rsquo;s take a minute to walk through the fields of this struct to explain how the Listing works.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://computablelabs.github.io/compspec/docs/markettoken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/docs/markettoken/</guid>
      <description>Market Token MarketToken is a mintable and burnable ERC20 token. The MarketToken is tied to a particular Market and is created when the Market is created. Note the contrast with token curated registries, which don&amp;rsquo;t hold a mechanism for minting and burning their associated token.
The MarketToken is denominated in &amp;ldquo;market wei&amp;rdquo;. As with ETH, a &amp;ldquo;market wei&amp;rdquo; denominates 1/(10^18) of a MarketToken. Using wei units throughout prevents rounding error propagation and keeps contracts simple.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://computablelabs.github.io/compspec/docs/parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/docs/parameters/</guid>
      <description>Market Parameters The data market is governed by a set of a parameters dictated within Parameterizer. These parameters govern the function of the market by setting various critical settings. These parameters can be modified via a stakeholder vote. Let&amp;rsquo;s review the parameters controlled in Parameterizer:
stake: wei_value  The stake (in MarketToken wei) needed to issue a challenge to a listing. This parameter is of type wei_value
vote_by: timedelta  The time (in seconds) that a poll should remain open.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://computablelabs.github.io/compspec/docs/reserve/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/docs/reserve/</guid>
      <description>Reserve The Reserve is the &amp;ldquo;bank account&amp;rdquo; tied to each data market. It holds the funds tied to that data market and serves as incentive for makers to contribute the market.
Think of the reserve as holding earnings from the data in the data market that belong to all the MarketToken holders associated with the market. These earnings can come from either data purchase payments or from patron support for MarketToken.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://computablelabs.github.io/compspec/docs/sub-section/ego-numen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/docs/sub-section/ego-numen/</guid>
      <description>Ego numen obest Mors curru Iove pedibus curva humano salutem Lorem markdownum, mole, profugus. Madida ne quantus, pars verba lacrimis memorique longius cupidi ipse attrahit et. Vota liberiore rector suos fallit videor iustissimus barbara quod habet. Tantum patriaeque omnia spectes inimica mari nec spemque ululare: nuper quodque, sic, quo.
var php_wireless = 4; siteWinsock.switch_inbox += so_control_logic; if (target_website.bugCopyrightIcs.cms_digital_method(mca_active) &amp;gt; cloneScrollHttps) { https_drop_hard(97, sshPayload + autoresponder_bmp_file); hypertextCommercialBookmark = optical_impact; } architecture = userRate.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://computablelabs.github.io/compspec/docs/sub-section/natusque/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/docs/sub-section/natusque/</guid>
      <description>Natusque putat tu vero Scylaceaque neve coepisse Lorem markdownum hostem et addit arbusta iacuit laetissimus medio, quae quoque faciente. Belli et fuerant fuerat, curas Abas equos sacerdos iactasque videndo tanto, sub. Et simulasse caedis, est nec acre addiderat, manet Phrygiae quisquam, ater, aura sua deique cornua. Bacchi dixi cum tollit, ad sinistra mirum, non se dis fraudare in decimo vocet. Ducunt Acrisio sine ratem: enim illas venti, ferit nam ora.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://computablelabs.github.io/compspec/docs/userjourney/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/docs/userjourney/</guid>
      <description>The scope of this page is to list the user-signed contract method calls required to fulfill various user actions.
First, user-originated contract method calls must be signed by the user’s private key, which means the user probably confirms signing through a Metamask dialog.
Second, contract method calls are asynchronous and may take an indefinite amount of time since they only complete when 1 (or really several) blocks are mined.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://computablelabs.github.io/compspec/docs/voting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://computablelabs.github.io/compspec/docs/voting/</guid>
      <description>Voting Major decisions in the data market are made by token holder vote. These decisions include which new listing candidates should be confirmed as listings, which challenged listings should be removed, what changes should be made to the Parameterizer parameters, and what the datatrust should be. In this chapter, we&amp;rsquo;ll introduce you to the fundamentals of the voting system and describe the basics of on-chain Computable governance.
Candidates, Candidates, Candidates All voting is done on &amp;ldquo;candidates.</description>
    </item>
    
  </channel>
</rss>